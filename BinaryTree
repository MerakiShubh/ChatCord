// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
#include <queue>
#include <stack>

class node {
    public: 
    int data;
    node* left;
    node* right;
    
    node(int data){
        this -> data = data;
        this -> left = NULL;
        this -> right = NULL;
    }
};


node* buildTree(node* root){
    cout << "Enter the data: " << endl;
    int data;
    cin >> data;
    
    if(data == -1){
        root = NULL;
        return root;
    }
    
    root = new node(data);
    
    cout << "Enter the data for left: " << endl;
    root -> left = buildTree(root -> left);
    
    cout << "Enter the data for right: " << endl;
    root -> right = buildTree(root -> right);
    
    return root;
}


void levelOrderTraversal(node* root){
    
    if(root == NULL){
        return;
    }
        
 
    queue<node*> q;
    
    
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        
        node* temp = q.front();
        q.pop();
        if(temp == NULL){
            cout << endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }else {
            cout  << temp -> data << " ";
             if(temp -> left){
                q.push(temp -> left);
            }
            if(temp -> right){
                q.push(temp  -> right);
            }
        }
    }
}


void reverseLevelOrderTraversal(node* root){
    
    
    if(root == NULL){
        return;
    }
    
    queue<node*> q;
    stack<node*> s;
    
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        
        node* temp = q.front();
        q.pop();
        s.push(temp);
        
        if(temp == NULL){
            if(!q.empty()){
                q.push(NULL);
            }
        }else {
            
            if(temp -> right){
            q.push(temp -> right);
            }
    
            if(temp -> left){
            q.push(temp -> left);
            } 
        }
        
           
    }
    
    while (!s.empty()) {
        node* temp = s.top();
        s.pop();
        
        if(temp  == NULL){
            cout << endl;
        }else {
            cout << temp -> data << " ";
        }
    }
    
  
}

void inOrderTraversal(node* root){
    
    //base case
    if(root == NULL){
        return;
    }
    
    inOrderTraversal(root -> left);
    cout << root -> data <<  " ";
    inOrderTraversal(root -> right);
    
   
    
}

void preOrderTraversal(node* root){
    
    if(root == NULL){
        return;
    }
    
   
    cout << root -> data << " ";
    preOrderTraversal(root -> left);
    preOrderTraversal(root -> right);
    
   
}


void postOrderTraversal(node* root){
    
    if(root == NULL){
        return;
    }
    
    postOrderTraversal(root -> left);
    postOrderTraversal(root -> right);
    cout << root -> data << " ";
    
  
}


void buildFromLevelOrderTraversal(node* &root){
  

    queue<node*> q;
    
    cout << "Enter data for root: " << endl;
    int data;
    cin >> data;
    root = new node(data);  // Initialize the root
    q.push(root);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        cout << "Enter data to push in left of: " << temp -> data << endl;
        int leftData;
        cin >> leftData;
        
        if(leftData != -1){
           temp -> left = new node(leftData);
            q.push(temp -> left);
        }
        
        cout << "Enter data to push in right of: " << temp -> data << endl;
        int rightData;
        cin >> rightData;
        
        if(rightData != -1){
            temp -> right = new node(rightData);
            q.push(temp -> right);
        }
    }
}



int main() {
    
    node* root = NULL;
    
    // root =  buildTree(root);
    
    // cout << "Level Order Traversal" << endl;
    
    // levelOrderTraversal(root);
    
    // cout << "Reverse Level Order Traversal" << endl;
    
    // reverseLevelOrderTraversal(root);
    
    //  cout << endl << "In order traversal: ";
    
    // inOrderTraversal(root);
    
    // cout << endl << "Pre Order Traversal: ";
    
    // preOrderTraversal(root);
    
    // cout << endl << "Post Order Traversal: ";
    
    // postOrderTraversal(root);
    
    buildFromLevelOrderTraversal(root);
    
    levelOrderTraversal(root);
    // 2 8 6 -1 -1 3 -1 -1 4 5 -1 -1 -1

    return 0;
}
